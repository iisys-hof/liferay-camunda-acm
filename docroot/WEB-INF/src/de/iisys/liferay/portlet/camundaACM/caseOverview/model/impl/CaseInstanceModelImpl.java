/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.iisys.liferay.portlet.camundaACM.caseOverview.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance;
import de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstanceModel;
import de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstanceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CaseInstance service. Represents a row in the &quot;CamundaACM_CaseInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CaseInstanceImpl}.
 * </p>
 *
 * @author Christian OchsenkÃ¼hn
 * @see CaseInstanceImpl
 * @see de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance
 * @see de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstanceModel
 * @generated
 */
@JSON(strict = true)
public class CaseInstanceModelImpl extends BaseModelImpl<CaseInstance>
	implements CaseInstanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a case instance model instance should use the {@link de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance} interface instead.
	 */
	public static final String TABLE_NAME = "CamundaACM_CaseInstance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "liferayCaseInstanceId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "caseInstanceId", Types.VARCHAR },
			{ "caseDefinitionKey", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CamundaACM_CaseInstance (liferayCaseInstanceId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,caseInstanceId VARCHAR(75) null,caseDefinitionKey VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CamundaACM_CaseInstance";
	public static final String ORDER_BY_JPQL = " ORDER BY caseInstance.caseInstanceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CamundaACM_CaseInstance.caseInstanceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance"),
			true);
	public static long CASEDEFINITIONKEY_COLUMN_BITMASK = 1L;
	public static long CASEINSTANCEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CaseInstance toModel(CaseInstanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CaseInstance model = new CaseInstanceImpl();

		model.setLiferayCaseInstanceId(soapModel.getLiferayCaseInstanceId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCaseInstanceId(soapModel.getCaseInstanceId());
		model.setCaseDefinitionKey(soapModel.getCaseDefinitionKey());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CaseInstance> toModels(CaseInstanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CaseInstance> models = new ArrayList<CaseInstance>(soapModels.length);

		for (CaseInstanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance"));

	public CaseInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _liferayCaseInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLiferayCaseInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _liferayCaseInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CaseInstance.class;
	}

	@Override
	public String getModelClassName() {
		return CaseInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("liferayCaseInstanceId", getLiferayCaseInstanceId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("caseInstanceId", getCaseInstanceId());
		attributes.put("caseDefinitionKey", getCaseDefinitionKey());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long liferayCaseInstanceId = (Long)attributes.get(
				"liferayCaseInstanceId");

		if (liferayCaseInstanceId != null) {
			setLiferayCaseInstanceId(liferayCaseInstanceId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String caseInstanceId = (String)attributes.get("caseInstanceId");

		if (caseInstanceId != null) {
			setCaseInstanceId(caseInstanceId);
		}

		String caseDefinitionKey = (String)attributes.get("caseDefinitionKey");

		if (caseDefinitionKey != null) {
			setCaseDefinitionKey(caseDefinitionKey);
		}
	}

	@JSON
	@Override
	public long getLiferayCaseInstanceId() {
		return _liferayCaseInstanceId;
	}

	@Override
	public void setLiferayCaseInstanceId(long liferayCaseInstanceId) {
		_liferayCaseInstanceId = liferayCaseInstanceId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseInstanceId() {
		if (_caseInstanceId == null) {
			return StringPool.BLANK;
		}
		else {
			return _caseInstanceId;
		}
	}

	@Override
	public void setCaseInstanceId(String caseInstanceId) {
		_columnBitmask = -1L;

		if (_originalCaseInstanceId == null) {
			_originalCaseInstanceId = _caseInstanceId;
		}

		_caseInstanceId = caseInstanceId;
	}

	public String getOriginalCaseInstanceId() {
		return GetterUtil.getString(_originalCaseInstanceId);
	}

	@JSON
	@Override
	public String getCaseDefinitionKey() {
		if (_caseDefinitionKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _caseDefinitionKey;
		}
	}

	@Override
	public void setCaseDefinitionKey(String caseDefinitionKey) {
		_columnBitmask |= CASEDEFINITIONKEY_COLUMN_BITMASK;

		if (_originalCaseDefinitionKey == null) {
			_originalCaseDefinitionKey = _caseDefinitionKey;
		}

		_caseDefinitionKey = caseDefinitionKey;
	}

	public String getOriginalCaseDefinitionKey() {
		return GetterUtil.getString(_originalCaseDefinitionKey);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CaseInstance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CaseInstance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CaseInstance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CaseInstanceImpl caseInstanceImpl = new CaseInstanceImpl();

		caseInstanceImpl.setLiferayCaseInstanceId(getLiferayCaseInstanceId());
		caseInstanceImpl.setCompanyId(getCompanyId());
		caseInstanceImpl.setGroupId(getGroupId());
		caseInstanceImpl.setUserId(getUserId());
		caseInstanceImpl.setCreateDate(getCreateDate());
		caseInstanceImpl.setModifiedDate(getModifiedDate());
		caseInstanceImpl.setCaseInstanceId(getCaseInstanceId());
		caseInstanceImpl.setCaseDefinitionKey(getCaseDefinitionKey());

		caseInstanceImpl.resetOriginalValues();

		return caseInstanceImpl;
	}

	@Override
	public int compareTo(CaseInstance caseInstance) {
		int value = 0;

		value = getCaseInstanceId().compareTo(caseInstance.getCaseInstanceId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CaseInstance)) {
			return false;
		}

		CaseInstance caseInstance = (CaseInstance)obj;

		long primaryKey = caseInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CaseInstanceModelImpl caseInstanceModelImpl = this;

		caseInstanceModelImpl._originalCaseInstanceId = caseInstanceModelImpl._caseInstanceId;

		caseInstanceModelImpl._originalCaseDefinitionKey = caseInstanceModelImpl._caseDefinitionKey;

		caseInstanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CaseInstance> toCacheModel() {
		CaseInstanceCacheModel caseInstanceCacheModel = new CaseInstanceCacheModel();

		caseInstanceCacheModel.liferayCaseInstanceId = getLiferayCaseInstanceId();

		caseInstanceCacheModel.companyId = getCompanyId();

		caseInstanceCacheModel.groupId = getGroupId();

		caseInstanceCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			caseInstanceCacheModel.createDate = createDate.getTime();
		}
		else {
			caseInstanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			caseInstanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			caseInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		caseInstanceCacheModel.caseInstanceId = getCaseInstanceId();

		String caseInstanceId = caseInstanceCacheModel.caseInstanceId;

		if ((caseInstanceId != null) && (caseInstanceId.length() == 0)) {
			caseInstanceCacheModel.caseInstanceId = null;
		}

		caseInstanceCacheModel.caseDefinitionKey = getCaseDefinitionKey();

		String caseDefinitionKey = caseInstanceCacheModel.caseDefinitionKey;

		if ((caseDefinitionKey != null) && (caseDefinitionKey.length() == 0)) {
			caseInstanceCacheModel.caseDefinitionKey = null;
		}

		return caseInstanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{liferayCaseInstanceId=");
		sb.append(getLiferayCaseInstanceId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", caseInstanceId=");
		sb.append(getCaseInstanceId());
		sb.append(", caseDefinitionKey=");
		sb.append(getCaseDefinitionKey());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append(
			"de.iisys.liferay.portlet.camundaACM.caseOverview.model.CaseInstance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>liferayCaseInstanceId</column-name><column-value><![CDATA[");
		sb.append(getLiferayCaseInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>caseInstanceId</column-name><column-value><![CDATA[");
		sb.append(getCaseInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>caseDefinitionKey</column-name><column-value><![CDATA[");
		sb.append(getCaseDefinitionKey());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CaseInstance.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CaseInstance.class
		};
	private long _liferayCaseInstanceId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _caseInstanceId;
	private String _originalCaseInstanceId;
	private String _caseDefinitionKey;
	private String _originalCaseDefinitionKey;
	private long _columnBitmask;
	private CaseInstance _escapedModel;
}